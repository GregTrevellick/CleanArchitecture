SYNC WITH UPSTREAM
==================

clone/get ardalis latest version 

build ardalis latest version (to prove it does)

run the vsix, create a new sln, compare ardalis to trevellick - should be SOME diffs

if lots of diffs then easiests thing to do is replace my \src & \tests & CleanArchitecture.sln with Steve's more up to date versions (will reduce or eliminate conflicts)

git remote -v // List the current configured remote repository for your fork (ardalis not listed)

git remote add upstream https://github.com/ardalis/cleanarchitecture.git // Specify a new remote upstream repository that will be synced with the fork.

git remote -v // Verify the new upstream repository you've specified for your fork (ardalis is listed)

git fetch upstream // updates in remote upstream will be fetched to local repo in "upstream/master" (or whatever your local branch is)

git merge upstream/master // merge the changes in upstream/master into your local branch (master or otherwise)

resolve merge conflicts

Hint: Solution Items\template.json defines the projects included in the solution

build trevellick CleanArchitecture.Vsix.sln (to prove it does)

build trevellick CleanArchitecture.sln (to prove it does) 

run all unit tests (in both CleanArchitecture.sln & CleanArchitecture.Vsix.sln)

run the website & smoke test it (just in CleanArchitecture.sln)



PUBLISH
=======

(CleanArchitecture.Vsix.sln) Update version number in source.extension.vsixmanifest, set vsixTemplatePackSideWaffle.csproj as start up project, run (F5) the vsix into experimental instance, create a new solution in the experimental instance using my vsix template, build & run the new experimental solution locally (set the web project as start up project), run new experimental solution unit tests locally, compare ardalis to trevellick - should be NO diffs

Publish to marketplace (via VsmpPublish.ps - inc. update version number and create github release), upgrade in VS, create a new sln from the published vsix, compare to ardalis - should be NO diffs

Hint: refusing to allow an OAuth App to create or update workflow `.github/workflows/dotnetcore.yml` without `workflow` scope Fix: within the fork, add the same GitHub Action file (.github\workflow\blah.yml) as the upstream Also: https://github.community/t5/GitHub-Actions/
Refusing-to-allow-an-integration-to-create-or-update/td-p/32472

